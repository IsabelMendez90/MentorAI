import streamlit as st
import openai
from io import BytesIO
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
import re

# ‚úÖ **Rol Correcto del Chatbot (Solo para uso interno)** 
INSTRUCCIONES_SISTEMA = """
Eres Challenge Mentor AI, un asistente dise√±ado para ayudar a estudiantes de Mecatr√≥nica en el modelo TEC21
a definir su reto dentro del enfoque de Challenge-Based Learning (CBL). Debes hacer preguntas estructuradas
para guiar a los alumnos en la identificaci√≥n de su contexto, problem√°tica y propuesta de soluci√≥n.

üîπ No propongas retos hasta que el estudiante haya definido el contexto, problem√°tica y propuesta de soluci√≥n.
üîπ Pregunta sobre el estado del arte y su fuente de informaci√≥n.
üîπ Investiga qu√© necesita su socio formador (SIEMENS, Rockwell, emprendimiento, etc.).
üîπ Si el usuario dice que no sabe, expl√≠cale c√≥mo responder con ejemplos claros.
üîπ Clasifica autom√°ticamente al usuario en un perfil basado en sus respuestas, sin preguntarle directamente.
üîπ Adapta el tono seg√∫n el perfil: usa t√©rminos t√©cnicos para Especialistas, hip√≥tesis para Investigadores, y mercado para Emprendedores de prueba de concepto y Emprendedores de prototipo comercial.
üîπ Usa frases motivadoras y estructuradas para guiar el proceso.

Cuando proporciones datos, SIEMPRE debes incluir referencias reales.
Si no tienes una fuente confiable, responde con "Fuente no encontrada".
No inventes citas en formato APA o referencias falsas.
Si la informaci√≥n proviene de tu entrenamiento, indica que es un dato general y no tiene fuente.
"""

# Leer la API Key desde Streamlit Secrets
API_KEY = st.secrets["OPENROUTER_API_KEY"]
API_BASE = "https://openrouter.ai/api/v1"
MODEL_NAME = "deepseek/deepseek-r1:free"

# **üîπ Funci√≥n para obtener respuesta del chatbot**
def obtener_respuesta_chat(messages):
    client = openai.OpenAI(
        api_key=API_KEY,
        base_url=API_BASE
    )
    completion = client.chat.completions.create(
        model=MODEL_NAME,
        messages=[{"role": "system", "content": INSTRUCCIONES_SISTEMA}] + messages
    )
    return completion.choices[0].message.content

# **üîπ Inicializar historial de mensajes y estado si no existen**
if "messages" not in st.session_state:
    st.session_state.messages = []

if "responses" not in st.session_state:
    st.session_state.responses = {}

if "retroalimentacion_completada" not in st.session_state:
    st.session_state.retroalimentacion_completada = False

if "interacciones_chat" not in st.session_state:
    st.session_state.interacciones_chat = 0

# **üîπ T√≠tulo e introducci√≥n**
st.title("ü§ñ Challenge Mentor AI")
st.subheader("Gu√≠a interactiva para definir tu reto en el modelo TEC21 de Mecatr√≥nica.")
st.markdown(
    "Este asistente te ayudar√° paso a paso a estructurar tu reto dentro del enfoque de **Challenge-Based Learning (CBL)**. "
    "Primero recibir√°s **retroalimentaci√≥n** antes de generar un reto definitivo.")

# ‚úÖ **Formulario para capturar informaci√≥n del usuario**
with st.form("challenge_form"):
    nombre_proyecto = st.text_input("üìå Nombre del Proyecto")
    contexto = st.text_area("üåç Contexto")
    problema = st.text_area("‚ùå Problema Principal")
    impacto = st.text_area("üéØ Impacto del Problema")
    propuesta_solucion = st.text_area("üí° Propuesta de Soluci√≥n")

    tipo_proyecto = st.selectbox(
        "‚öôÔ∏è Tipo de Proyecto",
        ["Desarrollo tecnol√≥gico", "Investigaci√≥n", "Emprendimiento - Prueba de concepto", "Emprendimiento - Prototipo comercial"]
    )

    perfil_usuario = st.selectbox(
        "üë§ Perfil del Usuario",
        ["Ingeniero Innovador", "Emprendedor Estrat√©gico", "Investigador Anal√≠tico", "Solucionador Creativo", "Especialista T√©cnico"]
    )

    submit_button = st.form_submit_button("üì¢ Dame una Retroalimentaci√≥n")

# ‚úÖ **Procesar informaci√≥n del formulario**
if submit_button:
    if not nombre_proyecto or not contexto or not problema or not propuesta_solucion:
        st.warning("‚ö†Ô∏è Completa todos los campos antes de continuar.")
    else:
        st.session_state.responses = {
            "üìå Nombre del Proyecto": nombre_proyecto,
            "üåç Contexto": contexto,
            "‚ùå Problema Principal": problema,
            "üéØ Impacto": impacto,
            "üí° Propuesta de Soluci√≥n": propuesta_solucion,
            "‚öôÔ∏è Tipo de Proyecto": tipo_proyecto,
            "üë§ Perfil del Usuario": perfil_usuario
        }

        user_message = "\n".join([f"**{key}:** {value}" for key, value in st.session_state.responses.items()])
        st.session_state.messages.append({"role": "user", "content": user_message})

        with st.spinner("üì¢ Generando retroalimentaci√≥n..."):
            respuesta_chatbot = obtener_respuesta_chat(st.session_state.messages)

        st.session_state.messages.append({"role": "assistant", "content": respuesta_chatbot})
        st.session_state.retroalimentacion_completada = True
        st.rerun()

# ‚úÖ **Mostrar historial de conversaci√≥n**
if st.session_state.retroalimentacion_completada:
    st.subheader("üìù Historial de Conversaci√≥n")
    for msg in st.session_state.messages:
        if msg["role"] == "user":
            st.markdown(f"üë®‚Äçüéì **T√∫:** {msg['content']}")
        elif msg["role"] == "assistant":
            st.markdown(f"ü§ñ **Challenge Mentor AI:** {msg['content']}")

    user_input = st.text_area("üí¨ Escribe aqu√≠ tu pregunta:", height=100)

    if st.button("Enviar"):
        if user_input.strip():
            st.session_state.messages.append({"role": "user", "content": user_input})

            with st.spinner("ü§ñ Generando respuesta..."):
                chatbot_response = obtener_respuesta_chat(st.session_state.messages)

            st.session_state.messages.append({"role": "assistant", "content": chatbot_response})

            st.session_state.interacciones_chat += 1
            st.rerun()
        else:
            st.warning("‚ö†Ô∏è Por favor, escribe tu pregunta antes de enviar.")

# ‚úÖ **Descargar Reporte en PDF**
if st.session_state.interacciones_chat >= 3:
    st.subheader("üìÑ Descargar Reporte de la Conversaci√≥n")
    pdf_buffer = BytesIO()
    pdf = canvas.Canvas(pdf_buffer, pagesize=letter)
    pdf.setTitle("Reporte de Conversaci√≥n - Challenge Mentor AI")

    y = 750  # Posici√≥n vertical inicial
    pdf.setFont("Helvetica-Bold", 14)
    pdf.drawString(100, y, "Reporte de Conversaci√≥n - Challenge Mentor AI")
    y -= 30

    pdf.setFont("Helvetica", 12)
    for msg in st.session_state.messages:
        pdf.drawString(100, y, f"{msg['role'].capitalize()}: {msg['content']}")
        y -= 20
        if y < 50:
            pdf.showPage()
            y = 750

    pdf.save()
    pdf_buffer.seek(0)

    st.download_button(label="üìÑ Descargar Reporte en PDF", data=pdf_buffer, file_name="Reporte_Challenge_Mentor_AI.pdf", mime="application/pdf")
